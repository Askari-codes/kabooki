generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model book {
  id               Int                @id @default(autoincrement())
  title            String             @db.VarChar(255)
  genre            String             @db.VarChar(100) // Changed from relation to String
  publishedAt      DateTime
  summary          String?            @db.Text
  cover_url        String?            @db.VarChar(255)
  writerId         Int
  writer           writer             @relation(fields: [writerId], references: [id], onDelete: Cascade)
  slug             String             @unique(map: "Book_slug_key") @db.VarChar(255)
  rating           Int
  min_price        Float
  userfavoriteBook UserFavoriteBook[]
}
model Podcast {
  id                Int                 @id @default(autoincrement())
  title             String              @db.VarChar(255)
  genre             String              @db.VarChar(100)
  publishedAt       DateTime
  summary           String?             @db.Text
  cover_url         String?             @db.VarChar(255)
  hostId            Int
  host              Host                @relation(fields: [hostId], references: [id], onDelete: Cascade)
  slug             String               @unique(map: "Podcast_slug_key") @db.VarChar(255)
  rating           Int
  min_price        Float
  userFavoritePodcast UserFavoritePodcast[]
}

model Movie {
  id                Int                 @id @default(autoincrement())
  title             String
  rating            Float
  genre             String
  publishedAt       DateTime
  summary           String?             @db.Text
  poster            String
  slug              String              @unique
  stream            String
  userFavoriteMovie UserFavoriteMovie[]
}


model writer {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  last_name   String  @db.VarChar(255)
  description String? @db.Text
  picture_url String? @db.VarChar(255)
  country     String
  slug        String  @unique(map: "Writer_slug_key") @db.VarChar(255)
  books       book[]
}
model Host {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  last_name   String    @db.VarChar(255)
  description String?   @db.Text
  picture_url String?   @db.VarChar(255)
  country     String
  slug        String    @unique(map: "Host_slug_key") @db.VarChar(255)
  podcasts    Podcast[]
}


model User {
  id                  Int                 @id @default(autoincrement())
  user_name           String              @unique()
  email               String
  image               String?
  user_favorite_books UserFavoriteBook[]
  userFavoriteMovies  UserFavoriteMovie[]
  userFavoritePodcasts  UserFavoritePodcast[] 
}

model UserFavoriteBook {
  id      Int     @id @default(autoincrement())
  rating  Float?
  comment String? @db.Text
  userId  Int
  bookId  Int
  user    User    @relation(fields: [userId], references: [id])
  book    book    @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId]) // Composite unique constraint
}
model UserFavoritePodcast {
  id        Int      @id @default(autoincrement())
  rating    Float?
  comment   String?  @db.Text
  userId    Int
  podcastId Int
  user      User     @relation(fields: [userId], references: [id])
  podcast   Podcast  @relation(fields: [podcastId], references: [id])

  @@unique([userId, podcastId]) // Composite unique constraint
}

model UserFavoriteMovie {
  id      Int     @id @default(autoincrement())
  rating  Float?
  comment String?
  userId  Int
  movieId Int
  user    User    @relation(fields: [userId], references: [id])
  movie   Movie   @relation(fields: [movieId], references: [id])
}

